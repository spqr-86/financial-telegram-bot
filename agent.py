import os
import logging
from datetime import datetime
from typing import Dict, Any
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from trustcall import create_extractor
from models import Transaction, UpdateMemory, EXPENSE_CATEGORIES, INCOME_SOURCES
from database import DatabaseManager

logger = logging.getLogger(__name__)

class FinancialAgent:
    """LangGraph –∞–≥–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è PostgreSQL"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å OpenAI
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key:
            raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
        
        # –°–æ–∑–¥–∞–µ–º Trustcall —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        self.transaction_extractor = create_extractor(
            self.model,
            tools=[Transaction],
            tool_choice="Transaction",
            enable_inserts=True
        )
        
        logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_message(self, user_text: str, telegram_id: int) -> str:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_context = await self._get_user_context(telegram_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            request_type = await self._classify_request(user_text, user_context)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if request_type == "transaction":
                return await self._process_transaction(user_text, telegram_id)
            elif request_type == "balance_check":
                return await self._process_balance_request(telegram_id)
            elif request_type == "report_request":
                return await self._process_report_request(telegram_id)
            else:
                return await self._process_general_request(user_text, user_context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def _get_user_context(self, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            balance_info = await self.db_manager.get_balance(telegram_id)
            recent_transactions = await self.db_manager.get_user_transactions(telegram_id, limit=5)
            
            return {
                "balance": balance_info,
                "recent_transactions": recent_transactions,
                "telegram_id": telegram_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {"balance": {"balance": 0, "transaction_count": 0}, "recent_transactions": []}
    
    async def _classify_request(self, user_text: str, context: Dict) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        user_text_lower = user_text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in user_text_lower for word in ["–±–∞–ª–∞–Ω—Å", "—Å–∫–æ–ª—å–∫–æ", "–¥–µ–Ω–µ–≥", "–æ—Å—Ç–∞—Ç–æ–∫"]):
            return "balance_check"
        elif any(word in user_text_lower for word in ["–æ—Ç—á–µ—Ç", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Ç—Ä–∞—Ç—ã"]):
            return "report_request"
        elif any(word in user_text_lower for word in ["–ø–æ—Ç—Ä–∞—Ç–∏–ª", "–∑–∞–ø–ª–∞—Ç–∏–ª", "–∫—É–ø–∏–ª", "–ø–æ–ª—É—á–∏–ª", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥"]):
            return "transaction"
        else:
            return "general"
    
    async def _process_transaction(self, user_text: str, telegram_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Trustcall"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è Trustcall
            instruction = f"""
–ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
1. –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: 'income' (–¥–æ—Ö–æ–¥) –∏–ª–∏ 'expense' (—Ä–∞—Å—Ö–æ–¥)
2. –°—É–º–º—É (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞)
3. –ö–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

–í—Ä–µ–º—è: {datetime.now().isoformat()}
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {", ".join(EXPENSE_CATEGORIES)}
–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤: {", ".join(INCOME_SOURCES)}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_text}"
"""
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Trustcall
            messages = [
                SystemMessage(content=instruction),
                HumanMessage(content=user_text)
            ]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            result = self.transaction_extractor.invoke({"messages": messages})
            
            if result["responses"]:
                transaction = result["responses"][0]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                transaction_data = transaction.to_dict()
                transaction_id = await self.db_manager.save_transaction(telegram_id, transaction_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                transaction_type_ru = "–î–æ—Ö–æ–¥" if transaction.type == "income" else "–†–∞—Å—Ö–æ–¥"
                
                response = f"""‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:**

üìä **{transaction_type_ru}:** {transaction.amount} {transaction.currency}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {transaction.category_or_source}"""
                
                if transaction.comment:
                    response += f"\nüí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {transaction.comment}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                balance_info = await self.db_manager.get_balance(telegram_id)
                response += f"\n\nüí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance_info['balance']:.2f} RUB"
                
                return response
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"
    
    async def _process_balance_request(self, telegram_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞"""
        
        try:
            balance_info = await self.db_manager.get_balance(telegram_id)
            
            if balance_info['transaction_count'] == 0:
                return """üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**

–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 RUB
üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã\""""
            
            response = f"""üí∞ **–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:**

**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance_info['balance']:.2f} RUB

üíö **–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤:** {balance_info['total_income']:.2f} RUB
‚ù§Ô∏è **–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:** {balance_info['total_expense']:.2f} RUB
üìä **–û–ø–µ—Ä–∞—Ü–∏–π:** {balance_info['transaction_count']}"""
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
    
    async def _process_report_request(self, telegram_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞"""
        
        try:
            balance_info = await self.db_manager.get_balance(telegram_id)
            
            if balance_info['transaction_count'] == 0:
                return "üìä **–û—Ç—á–µ—Ç –ø—É—Å—Ç** - –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            expenses_by_category = await self.db_manager.get_expenses_by_category(telegram_id)
            recent_transactions = await self.db_manager.get_user_transactions(telegram_id, limit=10)
            
            response = "üìä **–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢**\\n\\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response += f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance_info['balance']:.2f} RUB\\n"
            response += f"üíö **–î–æ—Ö–æ–¥—ã:** {balance_info['total_income']:.2f} RUB\\n"
            response += f"‚ù§Ô∏è **–†–∞—Å—Ö–æ–¥—ã:** {balance_info['total_expense']:.2f} RUB\\n\\n"
            
            # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if expenses_by_category:
                response += "üí∏ **–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:**\\n"
                for category, amount in sorted(expenses_by_category.items(), key=lambda x: x[1], reverse=True):
                    response += f"   ‚Ä¢ {category}: {amount:.2f} RUB\\n"
                response += "\\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if recent_transactions:
                response += "üìù **–ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò:**\\n"
                for t in recent_transactions[:5]:
                    type_emoji = "üíö" if t['type'] == 'income' else "‚ù§Ô∏è"
                    date_str = t['transaction_date'].strftime("%d.%m")
                    response += f"   {type_emoji} {date_str}: {t['amount']:.0f} RUB ({t['category_or_source']})\\n"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
    
    async def _process_general_request(self, user_text: str, context: Dict) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        return f"""ü§ñ **–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**

–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: _"{user_text}"_

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 50000" - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥  
‚Ä¢ "–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?" - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç" - –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üí∞ –ë–∞–ª–∞–Ω—Å: {context['balance']['balance']:.2f} RUB
üìä –û–ø–µ—Ä–∞—Ü–∏–π: {context['balance']['transaction_count']}"""
