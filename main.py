# –§–ò–ù–ê–õ–¨–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô main.py v3.1
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å event loop –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã

import os
import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database import DatabaseManager
from agent import FinancialAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinancialTelegramBot:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞ —Å AI –∞–≥–µ–Ω—Ç–æ–º"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv("BOT_TOKEN")
        self.database_url = os.getenv("DATABASE_URL")
        self.openai_key = os.getenv("OPENAI_API_KEY")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if not self.bot_token:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.database_url:
            raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.openai_key:
            raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.application = None
        self.db_manager = None
        self.agent = None
        self.is_initialized = False
        
        logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    async def initialize_components(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ AI –∞–≥–µ–Ω—Ç–∞"""
        
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager = DatabaseManager(self.database_url)
            await self.db_manager.initialize()
            
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            self.agent = FinancialAgent(self.db_manager)
            
            self.is_initialized = True
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.is_initialized:
            try:
                await self.db_manager.create_user_if_not_exists(
                    update.effective_chat.id,
                    update.effective_user.username,
                    update.effective_user.first_name
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        welcome_message = """
ü§ñ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v3.1**

–¢–µ–ø–µ—Ä—å —Å –ø–æ–ª–Ω–æ–π AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π! üß†

**–ß—Ç–æ —É–º–µ—é:**
üí∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å—É–º–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üí∞ –ü–æ–Ω–∏–º–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å
üìä –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üìà –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–º–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –ü—è—Ç–µ—Ä–æ—á–∫–µ"
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 75000 —Ä—É–±–ª–µ–π"
‚Ä¢ "–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞—Ç–∞–º"

**–ö–æ–º–∞–Ω–¥—ã:**
/help - —Å–ø—Ä–∞–≤–∫–∞
/balance - –±—ã—Å—Ç—Ä—ã–π –±–∞–ª–∞–Ω—Å
/report - –æ—Ç—á–µ—Ç
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ - —è –ø–æ–Ω–∏–º–∞—é! üòä
        """
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        
        help_message = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:**

**üí° –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" 
‚Ä¢ "–ó–∞–ø–ª–∞—Ç–∏–ª 2000 –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 50000"
‚Ä¢ "–ü—Ä–æ–¥–∞–ª –º–∞—à–∏–Ω—É –∑–∞ 800000"
‚Ä¢ "–ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 150 –≤ Starbucks"

**üìä –ó–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
‚Ä¢ "–ö–∞–∫–æ–π –±–∞–ª–∞–Ω—Å?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"

**ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
/balance - –±—ã—Å—Ç—Ä—ã–π –±–∞–ª–∞–Ω—Å  
/report - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üß† –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç AI:**
1. –í—ã –ø–∏—à–µ—Ç–µ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
2. AI –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É, –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
3. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É
4. –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** GPT-4, LangGraph, PostgreSQL
        """
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
        
        if not self.is_initialized:
            await update.message.reply_text("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
            return
        
        try:
            response = await self.agent.process_message("–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?", update.effective_chat.id)
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ balance_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        
        if not self.is_initialized:
            await update.message.reply_text("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
            return
        
        try:
            response = await self.agent.process_message("–ü–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", update.effective_chat.id)
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ report_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        bot_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
        db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if self.db_manager and self.is_initialized else "üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞"
        ai_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.agent and self.is_initialized else "üî¥ –ù–µ –≥–æ—Ç–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_checks = {
            "BOT_TOKEN": "üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if self.bot_token else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            "DATABASE_URL": "üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞" if self.database_url else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
            "OPENAI_API_KEY": "üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if self.openai_key else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        user_stats = "üìä –ó–∞–≥—Ä—É–∂–∞—é..."
        if self.is_initialized:
            try:
                balance_info = await self.db_manager.get_balance(update.effective_chat.id)
                user_stats = f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_info['balance']:.2f} RUB, üìä –û–ø–µ—Ä–∞—Ü–∏–π: {balance_info['transaction_count']}"
            except:
                user_stats = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        
        status_message = f"""
‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã v3.1:**

**üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
ü§ñ Telegram Bot: {bot_status}
üóÑÔ∏è PostgreSQL: {db_status}
üß† AI –ê–≥–µ–Ω—Ç: {ai_status}

**üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
üîë {env_checks["BOT_TOKEN"]} BOT_TOKEN
üóÑÔ∏è {env_checks["DATABASE_URL"]} DATABASE_URL  
ü§ñ {env_checks["OPENAI_API_KEY"]} OPENAI_API_KEY

**üë§ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
{user_stats}

**üìç –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:**
üåê Railway.app
‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC
üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if self.is_initialized else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"}

**üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
        logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞"""
        
        user_text = update.message.text
        chat_id = update.effective_chat.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({chat_id}): {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        if not self.is_initialized:
            await update.message.reply_text(
                "‚è≥ **–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...**\n\n"
                "AI –∞–≥–µ–Ω—Ç –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-15 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        try:
            # –ì–õ–ê–í–ù–ê–Ø –ú–ê–ì–ò–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
            response = await self.agent.process_message(user_text, chat_id)
            await update.message.reply_text(response, parse_mode='Markdown')
            
            logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ AI: {e}")
            
            error_response = f"""‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**

–°–æ–æ–±—â–µ–Ω–∏–µ: "{user_text}"
–û—à–∏–±–∫–∞: {str(e)}

**–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É  
‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."""
            
            await update.message.reply_text(error_response, parse_mode='Markdown')
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        
        logger.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\n"
                "‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É\n"
                "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("report", self.report_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ì–õ–ê–í–ù–´–ô - —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞)
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def run_async(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        
        try:
            logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.bot_token).build()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self.initialize_components()
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            await self.application.run_polling(
                drop_pending_updates=True,
                close_loop=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_async: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω"""
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞ v3.1")
    print("üß† –° AI –∞–≥–µ–Ω—Ç–æ–º, PostgreSQL –∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    
    try:
        bot = FinancialTelegramBot()
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
        if os.name == 'nt':  # Windows
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop.run_until_complete(bot.run_async())
        finally:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
            loop.close()
        
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway")
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
