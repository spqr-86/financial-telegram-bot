# –ü–†–û–°–¢–ê–Ø –°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø main.py –¥–ª—è Railway
# –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop

import os
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏  
from database import DatabaseManager
from agent import FinancialAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db_manager = None
agent = None
is_initialized = False

async def initialize_components():
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    global db_manager, agent, is_initialized
    
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        db_manager = DatabaseManager(database_url)
        await db_manager.initialize()
        
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = FinancialAgent(db_manager)
        
        is_initialized = True
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    
    global db_manager, is_initialized
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if is_initialized and db_manager:
        try:
            await db_manager.create_user_if_not_exists(
                update.effective_chat.id,
                update.effective_user.username,
                update.effective_user.first_name
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    welcome_message = """
ü§ñ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v3.2**

–ü–æ–ª–Ω–∞—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è! üß†

**–ß—Ç–æ —É–º–µ—é:**
üí∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å—É–º–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üí∞ –ü–æ–Ω–∏–º–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å
üìä –í–µ—Å—Ç–∏ —É—á–µ—Ç –≤ PostgreSQL
üìà –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 75000"
‚Ä¢ "–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç"

**–ö–æ–º–∞–Ω–¥—ã:**
/help - —Å–ø—Ä–∞–≤–∫–∞
/balance - –±–∞–ª–∞–Ω—Å
/report - –æ—Ç—á–µ—Ç
/status - —Å—Ç–∞—Ç—É—Å

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ! üòä
    """
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    
    help_message = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:**

**üí° –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" 
‚Ä¢ "–ó–∞–ø–ª–∞—Ç–∏–ª 2000 –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 50000"
‚Ä¢ "–ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 150"

**üìä –ó–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
‚Ä¢ "–ö–∞–∫–æ–π –±–∞–ª–∞–Ω—Å?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞—Ç–∞–º"

**ü§ñ –ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å
/balance - –±–∞–ª–∞–Ω—Å  
/report - –æ—Ç—á–µ—Ç
/status - —Å—Ç–∞—Ç—É—Å
/help - —Å–ø—Ä–∞–≤–∫–∞

**üß† AI –æ–±—Ä–∞–±–æ—Ç–∫–∞:**
1. –ü–∏—à–µ—Ç–µ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
2. AI –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É
4. –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

**Tech:** GPT-4o, LangGraph, PostgreSQL
    """
    
    await update.message.reply_text(help_message, parse_mode='Markdown')

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    
    global agent, is_initialized
    
    if not is_initialized:
        await update.message.reply_text("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        return
    
    try:
        response = await agent.process_message("–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?", update.effective_chat.id)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report"""
    
    global agent, is_initialized
    
    if not is_initialized:
        await update.message.reply_text("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        return
    
    try:
        response = await agent.process_message("–ü–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", update.effective_chat.id)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    
    global db_manager, agent, is_initialized
    
    # –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
    db_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db_manager and is_initialized else "üî¥ –ù–µ –≥–æ—Ç–æ–≤–∞"
    ai_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if agent and is_initialized else "üî¥ –ù–µ –≥–æ—Ç–æ–≤"
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = "üü¢ –ï—Å—Ç—å" if os.getenv("BOT_TOKEN") else "‚ùå –ù–µ—Ç"
    database_url = "üü¢ –ï—Å—Ç—å" if os.getenv("DATABASE_URL") else "‚ùå –ù–µ—Ç"
    openai_key = "üü¢ –ï—Å—Ç—å" if os.getenv("OPENAI_API_KEY") else "‚ùå –ù–µ—Ç"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = "üìä –ó–∞–≥—Ä—É–∂–∞—é..."
    if is_initialized and db_manager:
        try:
            balance_info = await db_manager.get_balance(update.effective_chat.id)
            user_stats = f"üí∞ {balance_info['balance']:.2f} RUB, üìä {balance_info['transaction_count']} –æ–ø–µ—Ä–∞—Ü–∏–π"
        except:
            user_stats = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
    
    status_message = f"""
‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã v3.2:**

**üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
ü§ñ Telegram Bot: {bot_status}
üóÑÔ∏è PostgreSQL: {db_status}
üß† AI –ê–≥–µ–Ω—Ç: {ai_status}

**üîß Env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
üîë BOT_TOKEN: {bot_token}
üóÑÔ∏è DATABASE_URL: {database_url}
ü§ñ OPENAI_API_KEY: {openai_key}

**üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
{user_stats}

**üìç –°–µ—Ä–≤–µ—Ä:**
üåê Railway.app
‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC
üîÑ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {"‚úÖ –ì–æ—Ç–æ–≤" if is_initialized else "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"}

**üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö  
‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    """
    
    await update.message.reply_text(status_message, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI"""
    
    global agent, is_initialized
    
    user_text = update.message.text
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({chat_id}): {user_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if not is_initialized:
        await update.message.reply_text(
            "‚è≥ **–°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...**\n\n"
            "AI –∞–≥–µ–Ω—Ç –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ /status"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    try:
        # –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–†–ï–ó AI –ê–ì–ï–ù–¢–ê
        response = await agent.process_message(user_text, chat_id)
        await update.message.reply_text(response, parse_mode='Markdown')
        
        logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        error_response = f"""‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**

–°–æ–æ–±—â–µ–Ω–∏–µ: "{user_text}"
–û—à–∏–±–∫–∞: {str(e)}

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        
        await update.message.reply_text(error_response, parse_mode='Markdown')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n"
            "‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\n"
            "‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
        )

async def post_init(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await initialize_components()

def main():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫"""
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞ v3.2")
    print("üß† –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    try:
        logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).post_init(post_init).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("report", report_command))
        application.add_handler(CommandHandler("status", status_command))
        
        # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        
        # –ü–†–û–°–¢–û–ô –°–ò–ù–•–†–û–ù–ù–´–ô –ó–ê–ü–£–°–ö
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
